#include <glad/gl.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/string_cast.hpp>

#include <iostream>
#include <vector>
#include <iomanip>
#include <math.h>
#include <sstream>

// Your includes
#include "skybox.h"
#include "plane.h"
#include "loader.h"  // MyBot
#include "render/Shader.h"

static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods);

// GLOBALS
static GLFWwindow* window;
static int windowWidth = 1024;
static int windowHeight = 768;

// Camera
static float cameraSpeed = 1;
static glm::vec3 eye_center = glm::vec3(4.0f, 0.0f, -5.0f);
static glm::vec3 lookat = glm::vec3(0.0f, 0.0f, -1.0f);
static glm::vec3 up = glm::vec3(0.0f, 1.0f, 0.0f);

static float FoV = 45.0f;
static float zNear = 0.1f;
static float zFar = 1200.0f;

// For shadow pass
float lightVertices[] = {
    // positions         
    -0.1f, -0.1f, -0.1f,
     0.1f, -0.1f, -0.1f,
     0.1f,  0.1f, -0.1f,
     0.1f,  0.1f, -0.1f,
    -0.1f,  0.1f, -0.1f,
    -0.1f, -0.1f, -0.1f,

    -0.1f, -0.1f,  0.1f,
     0.1f, -0.1f,  0.1f,
     0.1f,  0.1f,  0.1f,
     0.1f,  0.1f,  0.1f,
    -0.1f,  0.1f,  0.1f,
    -0.1f, -0.1f,  0.1f,

    -0.1f,  0.1f,  0.1f,
    -0.1f,  0.1f, -0.1f,
    -0.1f, -0.1f, -0.1f,
    -0.1f, -0.1f, -0.1f,
    -0.1f, -0.1f,  0.1f,
    -0.1f,  0.1f,  0.1f,

     0.1f,  0.1f,  0.1f,
     0.1f,  0.1f, -0.1f,
     0.1f, -0.1f, -0.1f,
     0.1f, -0.1f, -0.1f,
     0.1f, -0.1f,  0.1f,
     0.1f,  0.1f,  0.1f,

    -0.1f, -0.1f, -0.1f,
     0.1f, -0.1f, -0.1f,
     0.1f, -0.1f,  0.1f,
     0.1f, -0.1f,  0.1f,
    -0.1f, -0.1f,  0.1f,
    -0.1f, -0.1f, -0.1f,

    -0.1f,  0.1f, -0.1f,
     0.1f,  0.1f, -0.1f,
     0.1f,  0.1f,  0.1f,
     0.1f,  0.1f,  0.1f,
    -0.1f,  0.1f,  0.1f,
    -0.1f,  0.1f, -0.1f
};


int main()
{
    // --------------------------------------------------
    // 1) Initialize GLFW
    // --------------------------------------------------
    if (!glfwInit()) {
        std::cerr << "Failed to initialize GLFW." << std::endl;
        return -1;
    }
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    window = glfwCreateWindow(windowWidth, windowHeight, "OpenGL Window", NULL, NULL);
    if (!window) {
        std::cerr << "Failed to create GLFW window." << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);
    glfwSetKeyCallback(window, key_callback);

    // --------------------------------------------------
    // 2) Load GL via glad
    // --------------------------------------------------
    int version = gladLoadGL(glfwGetProcAddress);
    if (version == 0) {
        std::cerr << "Failed to initialize OpenGL context." << std::endl;
        return -1;
    }

    glClearColor(0.2f, 0.2f, 0.25f, 0.0f);
    glEnable(GL_DEPTH_TEST);
    glDisable(GL_CULL_FACE);

    // --------------------------------------------------
    // 3) Create Shaders for depth pass & final pass
    //    (They are also used internally by your classes)
    // --------------------------------------------------

    Shader shader(
        "C:/MyStuff/Mymy_Old/newDocs/ICS_24_25/COMPUTER_GRAPHICS/final_project/emerald/Toward_a_Futuristic_Emerald_Isle/src/shader/point_shadows.vert",
        "C:/MyStuff/Mymy_Old/newDocs/ICS_24_25/COMPUTER_GRAPHICS/final_project/emerald/Toward_a_Futuristic_Emerald_Isle/src/shader/point_shadows.frag"
    );
    Shader simpleDepthShader(
        "C:/MyStuff/Mymy_Old/newDocs/ICS_24_25/COMPUTER_GRAPHICS/final_project/emerald/Toward_a_Futuristic_Emerald_Isle/src/shader/point_shadows_depth.vert",
        "C:/MyStuff/Mymy_Old/newDocs/ICS_24_25/COMPUTER_GRAPHICS/final_project/emerald/Toward_a_Futuristic_Emerald_Isle/src/shader/point_shadows_depth.frag",
        "C:/MyStuff/Mymy_Old/newDocs/ICS_24_25/COMPUTER_GRAPHICS/final_project/emerald/Toward_a_Futuristic_Emerald_Isle/src/shader/point_shadows_depth.gs"
    );
    // --------------------------------------------------
    // 4) Create FBO & depth texture for shadows
    // --------------------------------------------------
    static const unsigned int SHADOW_WIDTH = 1024, SHADOW_HEIGHT = 1024;
    unsigned int depthMapFBO;
    glGenFramebuffers(1, &depthMapFBO);

    unsigned int depthCubemap;
    glGenTextures(1, &depthCubemap);
    glBindTexture(GL_TEXTURE_CUBE_MAP, depthCubemap);
    for (unsigned int i = 0; i < 6; ++i)
        glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL_DEPTH_COMPONENT, SHADOW_WIDTH, SHADOW_HEIGHT, 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
    // attach depth texture as FBO's depth buffer
    glBindFramebuffer(GL_FRAMEBUFFER, depthMapFBO);
    glFramebufferTexture(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, depthCubemap, 0);
    glDrawBuffer(GL_NONE);
    glReadBuffer(GL_NONE);
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    // Tell the final-pass shader which texture units to sample from
    shader.use();
    shader.setInt("diffuseTexture", 0);  // plane or bot’s color
    shader.setInt("depthMap", 1);  // depth map

    glm::vec3 lightPos(4.0f, 4.0f, 4.0f);

    bool shadows = true;







    // --------------------------------------------------
    // 5) Create your objects
    // --------------------------------------------------
    MyBot bot;
    Skybox skybox("C:/MyStuff/Mymy_Old/newDocs/ICS_24_25/COMPUTER_GRAPHICS/final_project/emerald/Toward_a_Futuristic_Emerald_Isle/src/model/sky.png");
    Plane  plane;

    bot.initialize(shader, simpleDepthShader);
    skybox.initialize();
    plane.initialize(shader);

    // Setup some transforms
    glm::mat4 modelMatrix = glm::scale(
        glm::translate(glm::mat4(1.0f), glm::vec3(0.0f, 0.0f, 0.0f)),
        glm::vec3(0.01f, 1.0f, 0.01f)
    );

    // --------------------------------------------------
    // 6) Main Loop
    // --------------------------------------------------
    float  fTime = 0.0f;
    unsigned long frames = 0;
    double lastTime = glfwGetTime();

    // Example light info
    //float near_plane = 1.0f;
    //float far_plane = 100.0f;

    while (!glfwWindowShouldClose(window))
    {
        // ----------------------------------------------
        // per-frame time logic
        // ----------------------------------------------
        double currentTime = glfwGetTime();
        float deltaTime = float(currentTime - lastTime);
        lastTime = currentTime;
        fTime += deltaTime;
        frames++;

        if (fTime > 2.0f) {
            float fps = frames / fTime;
            frames = 0;
            fTime = 0.0f;
            std::stringstream stream;
            stream << std::fixed << std::setprecision(2)
                << "Shadow Mapping | FPS: " << fps;
            glfwSetWindowTitle(window, stream.str().c_str());
        }
        
        
        
        lightPos.z = static_cast<float>(sin(glfwGetTime() * 0.5) * 3.0);

        float near_plane = 1.0f;
        float far_plane = 100.0f;

        glm::mat4 shadowProj = glm::perspective(glm::radians(90.0f), (float)SHADOW_WIDTH / (float)SHADOW_HEIGHT, near_plane, far_plane);
        std::vector<glm::mat4> shadowTransforms;
        shadowTransforms.push_back(shadowProj * glm::lookAt(lightPos, lightPos + glm::vec3(1.0f, 0.0f, 0.0f), glm::vec3(0.0f, -1.0f, 0.0f)));
        shadowTransforms.push_back(shadowProj * glm::lookAt(lightPos, lightPos + glm::vec3(-1.0f, 0.0f, 0.0f), glm::vec3(0.0f, -1.0f, 0.0f)));
        shadowTransforms.push_back(shadowProj * glm::lookAt(lightPos, lightPos + glm::vec3(0.0f, 1.0f, 0.0f), glm::vec3(0.0f, 0.0f, 1.0f)));
        shadowTransforms.push_back(shadowProj * glm::lookAt(lightPos, lightPos + glm::vec3(0.0f, -1.0f, 0.0f), glm::vec3(0.0f, 0.0f, -1.0f)));
        shadowTransforms.push_back(shadowProj * glm::lookAt(lightPos, lightPos + glm::vec3(0.0f, 0.0f, 1.0f), glm::vec3(0.0f, -1.0f, 0.0f)));
        shadowTransforms.push_back(shadowProj * glm::lookAt(lightPos, lightPos + glm::vec3(0.0f, 0.0f, -1.0f), glm::vec3(0.0f, -1.0f, 0.0f)));



        // ----------------------------------------------
        // 1) Compute light's orthographic transform
        // ----------------------------------------------
        /*       glm::mat4 lightProjection = glm::ortho(
            -20.0f, 20.0f, -20.0f, 20.0f,
            near_plane, far_plane
        );
        glm::mat4 lightView = glm::lookAt(
            lightPos,
            glm::vec3(0.0f),
            glm::vec3(0.0f, 1.0f, 0.0f)
        );*/

        // Also compute camera's view/projection
        glm::mat4 projectionMatrix = glm::perspective(
            glm::radians(FoV),
            float(windowWidth) / float(windowHeight),
            zNear,
            zFar
        );
        glm::mat4 viewMatrix = glm::lookAt(eye_center, lookat, up);

        // We'll use vp = projectionMatrix * viewMatrix for plane
        glm::mat4 vp = projectionMatrix * viewMatrix;

        // ----------------------------------------------
        // 2) FIRST PASS: Render scene from light's POV
        //    into the depth map
        // ----------------------------------------------

            //simpleDepthShader.setMat4("lightSpaceMatrix", lightSpaceMatrix);

        // (Optional) if your depth vertex shader has a `uniform mat4 model;`
        // you can set it per-object. For plane, e.g.:
        //   simpleDepthShader.setMat4("model", modelMatrix);

        glViewport(0, 0, SHADOW_WIDTH, SHADOW_HEIGHT);

        glBindFramebuffer(GL_FRAMEBUFFER, depthMapFBO);
            glClear(GL_DEPTH_BUFFER_BIT);
            simpleDepthShader.use();
            for (unsigned int i = 0; i < 6; ++i)
                simpleDepthShader.setMat4("shadowMatrices[" + std::to_string(i) + "]", shadowTransforms[i]);
            simpleDepthShader.setFloat("far_plane", far_plane);
            simpleDepthShader.setVec3("lightPos", lightPos);

        // Render each object with its own "shadowRender" method
        bot.shadowRender(simpleDepthShader, depthMapFBO);
        plane.shadowRender(simpleDepthShader, depthMapFBO);

        glBindFramebuffer(GL_FRAMEBUFFER, 0);

        // ----------------------------------------------
        // 3) SECOND PASS: Render scene as normal
        //    from the camera’s POV, but sample shadowMap
        // ----------------------------------------------
        glViewport(0, 0, windowWidth, windowHeight);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        // a) Bind the final-pass shader (which is basically
        //    "shadow_mapping.vs" + "shadow_mapping.fs")
        //    For example, let’s just use "shader" for everything:
        shader.use();
        shader.setInt("depthMap", 1);
        shader.setMat4("projection", projectionMatrix);
        shader.setMat4("view", viewMatrix);
        // b) Pass the lightSpaceMatrix to that shader
        //    so it can do the shadow lookups
        //shader.setMat4("lightSpaceMatrix", lightSpaceMatrix);

        // c) Also set "lightPos" and "viewPos"
        shader.setVec3("lightPos", lightPos);
        shader.setVec3("viewPos", eye_center);
        shader.setInt("shadows", shadows);
        shader.setFloat("far_plane", far_plane);
        // d) Now bind the shadow map to texture unit 1
        glActiveTexture(GL_TEXTURE1);
        glBindTexture(GL_TEXTURE_CUBE_MAP, depthCubemap);
        // The shader was told `shader.setInt("shadowMap", 1);` earlier

        // e) Render each object in normal camera space
        //    We pass (vp, modelMatrix, eye_center, false)
        //    which calls the plane::render(...).
        //    Internally, plane::render will do "planeprogram" or "shader" use.
        //    But we can also do "planeprogram.use()" if you prefer.
        //    For the example below, let's just call plane.render(...).
        bot.render(shader, vp, projectionMatrix, viewMatrix, false, lightPos);
        plane.render(shader, vp, modelMatrix, eye_center, false, lightPos);

        // If you have a different method for the bot’s final pass:

        // Then your skybox as well
        skybox.render(viewMatrix, projectionMatrix);

        // Finally
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}




//////////////////////////////////////////////////////////////////////////////////////////////
static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode) {
	glm::vec3 forward = glm::normalize(lookat - eye_center);

	// Calculate right (perpendicular direction to both 'up' and 'forward')
	glm::vec3 right = glm::normalize(glm::cross(up, forward));

	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS) {
		// Move forward (along the 'lookat' direction)
		eye_center += cameraSpeed * forward;
		lookat += cameraSpeed * forward;
	}
	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS) {
		// Move left (perpendicular to the 'lookat' direction)
		eye_center += cameraSpeed * right;
		lookat += cameraSpeed * right;
	}
	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS) {
		// Move backward (opposite of the 'lookat' direction)
		eye_center -= cameraSpeed * forward;
		lookat -= cameraSpeed * forward;
	}
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS) {
		// Move right (perpendicular to the 'lookat' direction)
		eye_center -= cameraSpeed * right;
		lookat -= cameraSpeed * right;
	}
	//if (key == GLFW_KEY_UP && action == GLFW_PRESS)
	//{
	//	playbackSpeed += 1.0f;
	//	if (playbackSpeed > 10.0f)
	//		playbackSpeed = 10.0f;
	//}

	//if (key == GLFW_KEY_DOWN && action == GLFW_PRESS)
	//{
	//	playbackSpeed -= 1.0f;
	//	if (playbackSpeed < 1.0f) {
	//		playbackSpeed = 1.0f;
	//	}
	//}

	if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS)  // Left arrow key
	{
		// Rotate the camera around the Y-axis (counterclockwise)
		float angle = 0.05f; // Set the rotation speed (radians)

		// Calculate new position for the camera
		float x = eye_center.x * cos(angle) - eye_center.z * sin(angle);
		float z = eye_center.x * sin(angle) + eye_center.z * cos(angle);

		// Update eye_center (camera position)
		eye_center.x = x;
		eye_center.z = z;

		// Update the lookat direction to always point to the center of the object
		lookat = glm::normalize(glm::vec3(-eye_center.x, 0.0f, -eye_center.z));
	}
	if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS)  // Right arrow key
	{
		// Rotate the camera around the Y-axis (clockwise)
		float angle = -0.05f; // Negative for clockwise

		// Calculate new position for the camera
		float x = eye_center.x * cos(angle) - eye_center.z * sin(angle);
		float z = eye_center.x * sin(angle) + eye_center.z * cos(angle);

		// Update eye_center (camera position)
		eye_center.x = x;
		eye_center.z = z;

		// Update the lookat direction to always point to the center of the object
		lookat = glm::normalize(glm::vec3(-eye_center.x, 0.0f, -eye_center.z));
	}

	if (key == GLFW_KEY_SPACE && action == GLFW_PRESS) {
		//playAnimation = !playAnimation;
	}

	if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
		glfwSetWindowShouldClose(window, GL_TRUE);

	if (glfwGetKey(window, GLFW_KEY_E) == GLFW_PRESS) {
		// Move upward (along the 'up' vector)
		eye_center += cameraSpeed * up;
		lookat += cameraSpeed * up;
	}
	if (glfwGetKey(window, GLFW_KEY_Q) == GLFW_PRESS) {
		// Move downward (opposite to the 'up' vector)
		eye_center -= cameraSpeed * up;
		lookat -= cameraSpeed * up;
	}
}